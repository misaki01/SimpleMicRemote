<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutoSizeHeightDescription" xml:space="preserve">
    <value>Set whether the control automatically changes the "height" according to its contents.
Can be specified only when the AutoSize property is False.</value>
    <comment>Description of property "AutoSize Height"</comment>
  </data>
  <data name="AutoSizeHeightDisplayLinesDescription" xml:space="preserve">
    <value>Set the number of display lines in the combo box area during AutoSize Height.
When 0 is specified, adjust to the size to display all.</value>
    <comment>Description of property "Display line of AutoSize Height"</comment>
  </data>
  <data name="AutoSizeWidthDescription" xml:space="preserve">
    <value>Set whether the control automatically changes the "width" according to its contents.
Can be specified only when the AutoSize property is False.</value>
    <comment>Description of property "AutoSize Width"</comment>
  </data>
  <data name="EnabledImeKeyDescription" xml:space="preserve">
    <value>Set enable / disable ComboBox of IME Key</value>
    <comment>Description of property "IME Key Enabled"</comment>
  </data>
  <data name="EnabledInputKeyDescription" xml:space="preserve">
    <value>Set enable / disable ComboBox of Input Key</value>
    <comment>Description of property "Input Key Enabled"</comment>
  </data>
  <data name="EnabledMouseDescription" xml:space="preserve">
    <value>Set enable / disable ComboBox of Mouse</value>
    <comment>Description of property "Mouse Enabled"</comment>
  </data>
  <data name="EnabledOperateKeyDescription" xml:space="preserve">
    <value>Set enable / disable ComboBox of Operate Key</value>
    <comment>Description of property "Operate Key Enabled"</comment>
  </data>
  <data name="EnabledSpecialKeyDescription" xml:space="preserve">
    <value>Set enable / disable ComboBox of Special Key</value>
    <comment>Description of property "Special Key Enabled"</comment>
  </data>
  <data name="LayoutCategory" xml:space="preserve">
    <value>Layout</value>
    <comment>"Layout" category to set in the property</comment>
  </data>
  <data name="PropertyChangeCategory" xml:space="preserve">
    <value>Property change</value>
    <comment>"Property change" category to set in the property</comment>
  </data>
  <data name="SettingDataChangedDescription" xml:space="preserve">
    <value>Occurs when setting data is changed.</value>
    <comment>Description of event "Setting data change event"</comment>
  </data>
  <data name="SummaryTextFormat" xml:space="preserve">
    <value>Key input: {0}</value>
    <comment>Format of summary text {0}: Contents of input key</comment>
  </data>
  <data name="SummaryTextKeepPressing" xml:space="preserve">
    <value>Keep Pressing</value>
    <comment>A message to be output on the summary text in case of keep pressing.</comment>
  </data>
  <data name="VisibleImeKeyDescription" xml:space="preserve">
    <value>Set visible / invisible ComboBox of IME Key</value>
    <comment>Description of property "IME Key Visible"</comment>
  </data>
  <data name="VisibleInputKeyDescription" xml:space="preserve">
    <value>Set visible / invisible ComboBox of Input Key</value>
    <comment>Description of property "Input Key Visible"</comment>
  </data>
  <data name="VisibleMouseDescription" xml:space="preserve">
    <value>Set visible / invisible ComboBox of Mouse</value>
    <comment>Description of property "Mouse Visible"</comment>
  </data>
  <data name="VisibleOperateKeyDescription" xml:space="preserve">
    <value>Set visible / invisible ComboBox of Operate Key</value>
    <comment>Description of property "Operate Key Visible"</comment>
  </data>
  <data name="VisibleSpecialKeyDescription" xml:space="preserve">
    <value>Set visible / invisible ComboBox of Special Key</value>
    <comment>Description of property "Special Key Visible"</comment>
  </data>
</root>