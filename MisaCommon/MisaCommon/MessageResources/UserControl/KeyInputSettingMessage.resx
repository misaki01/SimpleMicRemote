<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutoSizeHeightDescription" xml:space="preserve">
    <value>コントロールが、その内容に合わせて自動的に高さを変更するかどうかを指定する
AutoSizeプロパティがFalseの場合のみ指定が可能</value>
    <comment>プロパティ「自動高さ調整」の説明</comment>
  </data>
  <data name="AutoSizeHeightDisplayLinesDescription" xml:space="preserve">
    <value>自動高さ調整時におけるコンボボックス領域の表示行数を指定する
0を指定した場合は全てを表示するサイズに調整する</value>
    <comment>プロパティ「コンボボックス領域の表示行数」の説明</comment>
  </data>
  <data name="AutoSizeWidthDescription" xml:space="preserve">
    <value>コントロールが、その内容に合わせて自動的に幅を変更するかどうかを指定する
AutoSizeプロパティがFalseの場合のみ指定が可能</value>
    <comment>プロパティ「自動幅調整」の説明</comment>
  </data>
  <data name="EnabledImeKeyDescription" xml:space="preserve">
    <value>IMEキーのコンボボックスの有効・無効を指定する</value>
    <comment>プロパティ「IMEキーのコンボボックスの有効・無効」の説明</comment>
  </data>
  <data name="EnabledInputKeyDescription" xml:space="preserve">
    <value>入力キーのコンボボックスの有効・無効を指定する</value>
    <comment>プロパティ「入力キーのコンボボックスの有効・無効」の説明</comment>
  </data>
  <data name="EnabledMouseDescription" xml:space="preserve">
    <value>マウスのコンボボックスの有効・無効を指定する</value>
    <comment>プロパティ「マウスのコンボボックスの有効・無効」の説明</comment>
  </data>
  <data name="EnabledOperateKeyDescription" xml:space="preserve">
    <value>操作キーのコンボボックスの有効・無効を指定する</value>
    <comment>プロパティ「操作キーのコンボボックスの有効・無効」の説明</comment>
  </data>
  <data name="EnabledSpecialKeyDescription" xml:space="preserve">
    <value>特殊キーのコンボボックスの有効・無効を指定する</value>
    <comment>プロパティ「特殊キーのコンボボックスの有効・無効」の説明</comment>
  </data>
  <data name="LayoutCategory" xml:space="preserve">
    <value>配置</value>
    <comment>プロパティに設定する「配置」カテゴリ</comment>
  </data>
  <data name="PropertyChangeCategory" xml:space="preserve">
    <value>プロパティ変更</value>
    <comment>プロパティに設定する「プロパティ変更」カテゴリ</comment>
  </data>
  <data name="SettingDataChangedDescription" xml:space="preserve">
    <value>設定データを変更した時に発生する</value>
    <comment>イベント「設定データ変更イベント」の説明</comment>
  </data>
  <data name="SummaryTextFormat" xml:space="preserve">
    <value>キー入力：{0}</value>
    <comment>概要文字列のフォーマット {0}:入力キーの内容</comment>
  </data>
  <data name="SummaryTextKeepPressing" xml:space="preserve">
    <value>押しっぱなし</value>
    <comment>概要文字列において、押しっぱなしの場合に出力するメッセージ</comment>
  </data>
  <data name="VisibleImeKeyDescription" xml:space="preserve">
    <value>IMEキーのコンボボックスの表示・非表示を指定する</value>
    <comment>プロパティ「IMEキーのコンボボックスの表示・非表示」の説明</comment>
  </data>
  <data name="VisibleInputKeyDescription" xml:space="preserve">
    <value>入力キーのコンボボックスの表示・非表示を指定する</value>
    <comment>プロパティ「入力キーのコンボボックスの表示・非表示」の説明</comment>
  </data>
  <data name="VisibleMouseDescription" xml:space="preserve">
    <value>マウスのコンボボックスの表示・非表示を指定する</value>
    <comment>プロパティ「マウスのコンボボックスの表示・非表示」の説明</comment>
  </data>
  <data name="VisibleOperateKeyDescription" xml:space="preserve">
    <value>操作キーのコンボボックスの表示・非表示を指定する</value>
    <comment>プロパティ「操作キーのコンボボックスの表示・非表示」の説明</comment>
  </data>
  <data name="VisibleSpecialKeyDescription" xml:space="preserve">
    <value>特殊キーのコンボボックスの表示・非表示を指定する</value>
    <comment>プロパティ「特殊キーのコンボボックスの表示・非表示」の説明</comment>
  </data>
</root>